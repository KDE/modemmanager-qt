/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m introspection/org.freedesktop.ModemManager1.Modem.ModemCdma.xml -p mm-modem-modemcdmainterface
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MM-MODEM-MODEMCDMAINTERFACE_H_1370342325
#define MM-MODEM-MODEMCDMAINTERFACE_H_1370342325

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.ModemManager1.Modem.ModemCdma
 */
class OrgFreedesktopModemManager1ModemModemCdmaInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.ModemManager1.Modem.ModemCdma"; }

public:
    OrgFreedesktopModemManager1ModemModemCdmaInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopModemManager1ModemModemCdmaInterface();

    Q_PROPERTY(uint Cdma1xRegistrationState READ cdma1xRegistrationState)
    inline uint cdma1xRegistrationState() const
    { return qvariant_cast< uint >(property("Cdma1xRegistrationState")); }

    Q_PROPERTY(QString Esn READ esn)
    inline QString esn() const
    { return qvariant_cast< QString >(property("Esn")); }

    Q_PROPERTY(uint EvdoRegistrationState READ evdoRegistrationState)
    inline uint evdoRegistrationState() const
    { return qvariant_cast< uint >(property("EvdoRegistrationState")); }

    Q_PROPERTY(QString Meid READ meid)
    inline QString meid() const
    { return qvariant_cast< QString >(property("Meid")); }

    Q_PROPERTY(uint Nid READ nid)
    inline uint nid() const
    { return qvariant_cast< uint >(property("Nid")); }

    Q_PROPERTY(uint Sid READ sid)
    inline uint sid() const
    { return qvariant_cast< uint >(property("Sid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Activate(const QString &carrier)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(carrier);
        return asyncCallWithArgumentList(QLatin1String("Activate"), argumentList);
    }

    inline QDBusPendingReply<> ActivateManual(const QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(properties);
        return asyncCallWithArgumentList(QLatin1String("ActivateManual"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActivationStateChanged(uint activation_state, uint activation_error, const QVariantMapList &status_changes);
};

namespace org {
  namespace freedesktop {
    namespace ModemManager1 {
      namespace Modem {
        typedef ::OrgFreedesktopModemManager1ModemModemCdmaInterface ModemCdma;
      }
    }
  }
}
#endif
