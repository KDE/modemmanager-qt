/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp org.freedesktop.ModemManager1.Modem.Modem3gpp.xml -p Modem3gpp -N
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MODEM3GPP_H_1371932651
#define MODEM3GPP_H_1371932651

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "generic-types.h"

/*
 * Proxy class for interface org.freedesktop.ModemManager1.Modem.Modem3gpp
 */
class OrgFreedesktopModemManager1ModemModem3gppInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.ModemManager1.Modem.Modem3gpp"; }

public:
    OrgFreedesktopModemManager1ModemModem3gppInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgFreedesktopModemManager1ModemModem3gppInterface();

    Q_PROPERTY(uint EnabledFacilityLocks READ enabledFacilityLocks)
    inline uint enabledFacilityLocks() const
    { return qvariant_cast< uint >(property("EnabledFacilityLocks")); }

    Q_PROPERTY(QString Imei READ imei)
    inline QString imei() const
    { return qvariant_cast< QString >(property("Imei")); }

    Q_PROPERTY(QString OperatorCode READ operatorCode)
    inline QString operatorCode() const
    { return qvariant_cast< QString >(property("OperatorCode")); }

    Q_PROPERTY(QString OperatorName READ operatorName)
    inline QString operatorName() const
    { return qvariant_cast< QString >(property("OperatorName")); }

    Q_PROPERTY(uint RegistrationState READ registrationState)
    inline uint registrationState() const
    { return qvariant_cast< uint >(property("RegistrationState")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Register(const QString &operator_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(operator_id);
        return asyncCallWithArgumentList(QLatin1String("Register"), argumentList);
    }

    inline QDBusPendingReply<ScanResultsType> Scan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Scan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
