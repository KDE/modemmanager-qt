/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generictypes.h -p modem3gppinterface
 * /home/jgrulich/development/projects/libmm-qt/dbus/introspection/org.freedesktop.ModemManager1.Modem.Modem3gpp.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MODEMMANAGERQT_MODEM3GPPINTERFACE_H
#define MODEMMANAGERQT_MODEM3GPPINTERFACE_H

#include "generictypes.h"
#include <QList>
#include <QObject>
#include <QString>
#include <QVariant>

/*
 * Proxy class for interface org.freedesktop.ModemManager1.Modem.Modem3gpp
 */
class OrgFreedesktopModemManager1ModemModem3gppInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
#ifdef MMQT_STATIC
    {
        return "org.kde.fakemodem.Modem.Modem3gpp";
    }
#else
    {
        return "org.freedesktop.ModemManager1.Modem.Modem3gpp";
    }
#endif
public:
    OrgFreedesktopModemManager1ModemModem3gppInterface(const QString &service,
                                                       const QString &path,
                                                       const QDBusConnection &connection,
                                                       QObject *parent = nullptr);

    ~OrgFreedesktopModemManager1ModemModem3gppInterface();

    Q_PROPERTY(uint EnabledFacilityLocks READ enabledFacilityLocks)
    inline uint enabledFacilityLocks() const
    {
        return qvariant_cast<uint>(property("EnabledFacilityLocks"));
    }

    Q_PROPERTY(QString Imei READ imei)
    inline QString imei() const
    {
        return qvariant_cast<QString>(property("Imei"));
    }

    Q_PROPERTY(QString OperatorCode READ operatorCode)
    inline QString operatorCode() const
    {
        return qvariant_cast<QString>(property("OperatorCode"));
    }

    Q_PROPERTY(QString OperatorName READ operatorName)
    inline QString operatorName() const
    {
        return qvariant_cast<QString>(property("OperatorName"));
    }

    Q_PROPERTY(uint RegistrationState READ registrationState)
    inline uint registrationState() const
    {
        return qvariant_cast<uint>(property("RegistrationState"));
    }

    Q_PROPERTY(uint SubscriptionState READ subscriptionState)
    inline uint subscriptionState() const
    {
        return qvariant_cast<uint>(property("SubscriptionState"));
    }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Register(const QString &operator_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(operator_id);
        return asyncCallWithArgumentList(QLatin1String("Register"), argumentList);
    }

    inline QDBusPendingReply<ModemManager::QVariantMapList> Scan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Scan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
