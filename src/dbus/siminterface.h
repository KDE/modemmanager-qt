/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i ../generictypes.h -p siminterface
 * /home/devin/kde/src/modemmanager-qt/src/dbus/introspection/org.freedesktop.ModemManager1.Sim.xml
 *
 * qdbusxml2cpp is Copyright (C) 2023 The Qt Company Ltd and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SIMINTERFACE_H
#define SIMINTERFACE_H

#include "../generictypes.h"
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QObject>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.ModemManager1.Sim
 */
class OrgFreedesktopModemManager1SimInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    {
        return "org.freedesktop.ModemManager1.Sim";
    }

public:
    OrgFreedesktopModemManager1SimInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopModemManager1SimInterface();

    Q_PROPERTY(bool Active READ active)
    inline bool active() const
    {
        return qvariant_cast<bool>(property("Active"));
    }

    Q_PROPERTY(QString Eid READ eid)
    inline QString eid() const
    {
        return qvariant_cast<QString>(property("Eid"));
    }

    Q_PROPERTY(QStringList EmergencyNumbers READ emergencyNumbers)
    inline QStringList emergencyNumbers() const
    {
        return qvariant_cast<QStringList>(property("EmergencyNumbers"));
    }

    Q_PROPERTY(uint EsimStatus READ esimStatus)
    inline uint esimStatus() const
    {
        return qvariant_cast<uint>(property("EsimStatus"));
    }

    Q_PROPERTY(QByteArray Gid1 READ gid1)
    inline QByteArray gid1() const
    {
        return qvariant_cast<QByteArray>(property("Gid1"));
    }

    Q_PROPERTY(QByteArray Gid2 READ gid2)
    inline QByteArray gid2() const
    {
        return qvariant_cast<QByteArray>(property("Gid2"));
    }

    Q_PROPERTY(QString Imsi READ imsi)
    inline QString imsi() const
    {
        return qvariant_cast<QString>(property("Imsi"));
    }

    Q_PROPERTY(QString OperatorIdentifier READ operatorIdentifier)
    inline QString operatorIdentifier() const
    {
        return qvariant_cast<QString>(property("OperatorIdentifier"));
    }

    Q_PROPERTY(QString OperatorName READ operatorName)
    inline QString operatorName() const
    {
        return qvariant_cast<QString>(property("OperatorName"));
    }

    Q_PROPERTY(QVariantMap PreferredNetworks READ preferredNetworks)
    inline QVariantMap preferredNetworks() const
    {
        return qvariant_cast<QVariantMap>(property("PreferredNetworks"));
    }

    Q_PROPERTY(uint Removability READ removability)
    inline uint removability() const
    {
        return qvariant_cast<uint>(property("Removability"));
    }

    Q_PROPERTY(QString SimIdentifier READ simIdentifier)
    inline QString simIdentifier() const
    {
        return qvariant_cast<QString>(property("SimIdentifier"));
    }

    Q_PROPERTY(uint SimType READ simType)
    inline uint simType() const
    {
        return qvariant_cast<uint>(property("SimType"));
    }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ChangePin(const QString &old_pin, const QString &new_pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(old_pin) << QVariant::fromValue(new_pin);
        return asyncCallWithArgumentList(QStringLiteral("ChangePin"), argumentList);
    }

    inline QDBusPendingReply<> EnablePin(const QString &pin, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(pin) << QVariant::fromValue(enabled);
        return asyncCallWithArgumentList(QStringLiteral("EnablePin"), argumentList);
    }

    inline QDBusPendingReply<> SendPin(const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(pin);
        return asyncCallWithArgumentList(QStringLiteral("SendPin"), argumentList);
    }

    inline QDBusPendingReply<> SendPuk(const QString &puk, const QString &pin)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(puk) << QVariant::fromValue(pin);
        return asyncCallWithArgumentList(QStringLiteral("SendPuk"), argumentList);
    }

    inline QDBusPendingReply<> SetPreferredNetworks(const QVariantMap &preferred_networks)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(preferred_networks);
        return asyncCallWithArgumentList(QStringLiteral("SetPreferredNetworks"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
