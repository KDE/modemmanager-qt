/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -i generictypes.h -p bearerinterface \
 * /home/jgrulich/development/projects/libmm-qt/dbus/introspection/org.freedesktop.ModemManager1.Bearer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MODEMMANAGERQT_BEARERINTERFACE_H
#define MODEMMANAGERQT_BEARERINTERFACE_H

#include "generictypes.h"
#include <QList>
#include <QObject>
#include <QString>
#include <QVariant>

/*
 * Proxy class for interface org.freedesktop.ModemManager1.Bearer
 */
class OrgFreedesktopModemManager1BearerInterface : public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
#ifdef MMQT_STATIC
    {
        return "org.kde.fakemodem.Bearer";
    }
#else
    {
        return "org.freedesktop.ModemManager1.Bearer";
    }
#endif
public:
    OrgFreedesktopModemManager1BearerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopModemManager1BearerInterface() override;

    Q_PROPERTY(bool Connected READ connected)
    inline bool connected() const
    {
        return qvariant_cast<bool>(property("Connected"));
    }

    Q_PROPERTY(QString Interface READ interface)
    inline QString interface() const
    {
        return qvariant_cast<QString>(property("Interface"));
    }

    Q_PROPERTY(QVariantMap Ip4Config READ ip4Config)
    inline QVariantMap ip4Config() const
    {
        return qvariant_cast<QVariantMap>(property("Ip4Config"));
    }

    Q_PROPERTY(QVariantMap Ip6Config READ ip6Config)
    inline QVariantMap ip6Config() const
    {
        return qvariant_cast<QVariantMap>(property("Ip6Config"));
    }

    Q_PROPERTY(uint IpTimeout READ ipTimeout)
    inline uint ipTimeout() const
    {
        return qvariant_cast<uint>(property("IpTimeout"));
    }

    Q_PROPERTY(QVariantMap Properties READ properties)
    inline QVariantMap properties() const
    {
        return qvariant_cast<QVariantMap>(property("Properties"));
    }

    Q_PROPERTY(bool Suspended READ suspended)
    inline bool suspended() const
    {
        return qvariant_cast<bool>(property("Suspended"));
    }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Connect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Connect"), argumentList);
    }

    inline QDBusPendingReply<> Disconnect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Disconnect"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
